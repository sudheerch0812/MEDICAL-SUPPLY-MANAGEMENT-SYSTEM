Create Database Statement:
CREATE DATABASE medical;
USE medical;
 Creating Tables:
CREATE TABLE `admin` (
 `ID` decimal(7,0) NOT NULL,
 `A_USERNAME` varchar(50) NOT NULL,
 `A_PASSWORD` varchar(50) NOT NULL
);
CREATE TABLE `customer` (
 `C_ID` decimal(6,0) NOT NULL,
 `C_FNAME` varchar(30) NOT NULL,
 `C_LNAME` varchar(30) DEFAULT NULL,
 `C_AGE` int(11) NOT NULL,
 `C_SEX` varchar(6) NOT NULL,
 `C_PHNO` decimal(10,0) NOT NULL,
 `C_MAIL` varchar(40) DEFAULT NULL
) ;
CREATE TABLE `emplogin` (
 `E_ID` decimal(7,0) NOT NULL,
 `E_USERNAME` varchar(20) NOT NULL,
 `E_PASS` varchar(30) NOT NULL
);
CREATE TABLE `employee` (
 `E_ID` decimal(7,0) NOT NULL,
 `E_FNAME` varchar(30) NOT NULL,
 `E_LNAME` varchar(30) DEFAULT NULL,
 `BDATE` date NOT NULL,
 `E_AGE` int(11) NOT NULL,
 `E_SEX` varchar(6) NOT NULL,
 `E_TYPE` varchar(20) NOT NULL,
 `E_JDATE` date NOT NULL,
 `E_SAL` decimal(8,2) NOT NULL,
 `E_PHNO` decimal(10,0) NOT NULL,
 `E_MAIL` varchar(40) DEFAULT NULL,
 `E_ADD` varchar(40) DEFAULT NULL
) ;
CREATE TABLE `meds` (
 `MED_ID` decimal(6,0) NOT NULL,
 `MED_NAME` varchar(50) NOT NULL,
 `MED_QTY` int(11) NOT NULL,
 `CATEGORY` varchar(20) DEFAULT NULL,
 `MED_PRICE` decimal(6,2) NOT NULL,
 `LOCATION_RACK` varchar(30) DEFAULT NULL
) ;
17
CREATE TABLE `purchase` (
 `P_ID` decimal(4,0) NOT NULL,
 `SUP_ID` decimal(3,0) NOT NULL,
 `MED_ID` decimal(6,0) NOT NULL,
 `P_QTY` int(11) NOT NULL,
 `P_COST` decimal(8,2) NOT NULL,
 `PUR_DATE` date NOT NULL,
 `MFG_DATE` date NOT NULL,
 `EXP_DATE` date NOT NULL
) ;
CREATE TABLE `sales` (
 `SALE_ID` int(11) NOT NULL,
 `C_ID` decimal(6,0) NOT NULL,
 `S_DATE` date DEFAULT NULL,
 `S_TIME` time DEFAULT NULL,
 `TOTAL_AMT` decimal(8,2) DEFAULT NULL,
 `E_ID` decimal(7,0) NOT NULL
);
CREATE TABLE `sales_items` (
 `SALE_ID` int(11) NOT NULL,
 `MED_ID` decimal(6,0) NOT NULL,
 `SALE_QTY` int(11) NOT NULL,
 `TOT_PRICE` decimal(8,2) NOT NULL
);
CREATE TABLE `suppliers` (
 `SUP_ID` decimal(3,0) NOT NULL,
 `SUP_NAME` varchar(25) NOT NULL,
 `SUP_ADD` varchar(30) NOT NULL,
 `SUP_PHNO` decimal(10,0) NOT NULL,
 `SUP_MAIL` varchar(40) NOT NULL
);
INSERT STATEMENTS:
INSERT INTO `admin` (`ID`, `A_USERNAME`, `A_PASSWORD`) VALUES
('1', 'admin', 'password');
INSERT INTO `customer` (`C_ID`, `C_FNAME`, `C_LNAME`, `C_AGE`, `C_SEX`, `C_PHNO`, `C_MAIL`)
VALUES
('987101', 'Safia', 'Malik', 22, 'Female', '9632587415', 'safia@gmail.com'),
('987102', 'Varun', 'Ilango', 24, 'Male', '9987565423', 'varun@gmail.com'),
('987103', 'Suja', 'Suresh', 45, 'Female', '7896541236', 'suja@hotmail.com'),
('987104', 'Agatha', 'Elizabeth', 30, 'Female', '7845129635', 'agatha@gmail.com'),
('987105', 'Zayed', 'Shah', 40, 'Male', '6789541235', 'zshah@hotmail.com'),
('987106', 'Vijay', 'Kumar', 60, 'Male', '8996574123', 'vijayk@yahoo.com'),
('987107', 'Meera', 'Das', 35, 'Female', '7845963259', 'meera@gmail.com');
INSERT INTO `emplogin` (`E_ID`, `E_USERNAME`, `E_PASS`) VALUES
('4567005', 'amaya', 'pass1'),
('4567002', 'anita', 'pass2'),
('4567010', 'daniel', 'pass3'),
('4567003', 'harish', 'pass4'),
('4567009', 'shayla', 'pass5'),
('4567006', 'shoaib', 'pass6'),
('4567001', 'varshini', 'pass7');
18
INSERT INTO `employee` (`E_ID`, `E_FNAME`, `E_LNAME`, `BDATE`, `E_AGE`, `E_SEX`, `E_TYPE`,
`E_JDATE`, `E_SAL`, `E_PHNO`, `E_MAIL`, `E_ADD`) VALUES
('1', 'Admin', '-', '1989-05-24', 30, 'Female', 'Admin', '2009-06-24', '95000.00', '9874563219',
'admin@pharmacia.com', 'Chennai'),
('4567001', 'Varshini', 'Elangovan', '1995-10-05', 25, 'Female', 'Pharmacist', '2017-11-12', '25000.00',
'9967845123', 'evarsh@hotmail.com', 'Thiruvanmiyur'),
('4567002', 'Anita', 'Shree', '2000-10-03', 20, 'Female', 'Pharmacist', '2012-10-06', '45000.00', '8546123566',
'anita@gmail.com', 'Adyar'),
('4567003', 'Harish', 'Raja', '1998-02-01', 22, 'Male', 'Pharmacist', '2019-07-06', '21000.00', '7854123694',
'harishraja@live.com', 'T.Nagar'),
('4567005', 'Amaya', 'Singh', '1992-01-02', 28, 'Female', 'Pharmacist', '2017-05-16', '32000.00', '7894532165',
'amaya@gmail.com', 'Kottivakkam'),
('4567006', 'Shoaib', 'Ahmed', '1999-12-11', 20, 'Male', 'Pharmacist', '2018-09-05', '28000.00', '7896541234',
'shoaib@hotmail.com', 'Porur'),
('4567009', 'Shayla', 'Hussain', '1980-02-28', 40, 'Female', 'Manager', '2010-05-06', '80000.00', '7854123695',
'shaylah@gmail.com', 'Adyar'),
('4567010', 'Daniel', 'James', '1993-04-05', 27, 'Male', 'Pharmacist', '2016-01-05', '30000.00', '7896541235',
'daniels@gmail.com', 'Kodambakkam');
INSERT INTO `meds` (`MED_ID`, `MED_NAME`, `MED_QTY`, `CATEGORY`, `MED_PRICE`,
`LOCATION_RACK`) VALUES
('123001', 'Dolo 650 MG', 625, 'Tablet', '1.00', 'rack 5'),
('123002', 'Panadol Cold & Flu', 90, 'Tablet', '2.50', 'rack 6'),
('123003', 'Livogen', 25, 'Capsule', '5.00', 'rack 3'),
('123004', 'Gelusil', 440, 'Tablet', '1.25', 'rack 4'),
('123005', 'Cyclopam', 120, 'Tablet', '6.00', 'rack 2'),
('123006', 'Benadryl 200 ML', 35, 'Syrup', '50.00', 'rack 10'),
('123007', 'Lopamide', 15, 'Capsule', '5.00', 'rack 7'),
('123008', 'Vitamic C', 90, 'Tablet', '3.00', 'rack 8'),
('123009', 'Omeprazole', 35, 'Capsule', '4.00', 'rack 3'),
('123010', 'Concur 5 MG', 600, 'Tablet', '3.50', 'rack 9'),
('123011', 'Augmentin 250 ML', 115, 'Syrup', '80.00', 'rack 7');
INSERT INTO `purchase` (`P_ID`, `SUP_ID`, `MED_ID`, `P_QTY`, `P_COST`, `PUR_DATE`, `MFG_DATE`,
`EXP_DATE`) VALUES
('1001', '136', '123010', 200, '1500.50', '2020-03-01', '2019-05-05', '2021-05-10'),
('1002', '123', '123002', 1000, '3000.00', '2020-02-01', '2018-06-01', '2020-12-05'),
('1003', '145', '123006', 20, '800.00', '2020-04-22', '2017-02-05', '2020-07-01'),
('1004', '156', '123004', 250, '1000.00', '2020-04-02', '2020-05-06', '2023-05-06'),
('1005', '123', '123005', 200, '1200.00', '2020-02-01', '2019-08-02', '2021-04-01'),
('1006', '162', '123010', 500, '1500.00', '2019-04-22', '2018-01-01', '2020-05-02'),
('1007', '123', '123001', 500, '450.00', '2020-01-02', '2019-01-05', '2022-03-06');
INSERT INTO `sales` (`SALE_ID`, `C_ID`, `S_DATE`, `S_TIME`, `TOTAL_AMT`, `E_ID`) VALUES
(1, '987101', '2020-04-15', '13:23:03', '180.00', '4567009'),
(2, '987106', '2020-04-21', '20:19:31', '585.00', '1'),
(3, '987103', '2020-04-15', '11:23:53', '120.00', '4567010'),
(4, '987104', '2020-04-14', '18:20:00', '955.00', '4567006'),
(5, '987103', '2020-04-21', '15:24:43', '45.00', '1'),
(6, '987102', '2020-03-11', '10:24:43', '140.00', '4567001'),
(7, '987105', '2020-04-24', '00:25:54', '350.00', '1'),
(8, '987104', '2020-04-24', '00:47:47', '35.00', '4567001'),
(12, '987103', '2020-04-24', '19:33:16', '60.00', '1'),
(13, '987104', '2020-04-24', '21:30:43', '700.00', '1');
19
INSERT INTO `sales_items` (`SALE_ID`, `MED_ID`, `QTY_SOLD`, `TOTAL_PRICE`) VALUES
(1, '123001', 1, '100.00'),
(1, '123005', 2, '80.00'),
(1, '123003', 1, '0.00'),
(2, '123008', 5, '120.00'),
(2, '123010', 20, '120.00'),
(2, '123006', 1, '60.00'),
(3, '123001', 2, '20.00'),
(3, '123003', 1, '0.00'),
(4, '123001', 1, '100.00'),
(4, '123005', 2, '80.00'),
(5, '123005', 1, '6.00'),
(6, '123001', 1, '20.00'),
(6, '123003', 1, '0.00'),
(7, '123004', 2, '20.00'),
(8, '123008', 3, '15.00'); 

Constraints:
ALTER TABLE `admin`
 ADD PRIMARY KEY (`A_USERNAME`),
 ADD UNIQUE KEY `USERNAME` (`A_USERNAME`),
 ADD KEY `ID` (`ID`);
ALTER TABLE `customer`
 ADD PRIMARY KEY (`C_ID`),
 ADD UNIQUE KEY `C_PHNO` (`C_PHNO`),
 ADD UNIQUE KEY `C_MAIL` (`C_MAIL`);
ALTER TABLE `emplogin`
 ADD PRIMARY KEY (`E_USERNAME`),
 ADD KEY `E_ID` (`E_ID`);
ALTER TABLE `employee`
 ADD PRIMARY KEY (`E_ID`);
ALTER TABLE `meds`
 ADD PRIMARY KEY (`MED_ID`);
ALTER TABLE `purchase`
 ADD PRIMARY KEY (`P_ID`,`MED_ID`),
 ADD KEY `SUP_ID` (`SUP_ID`),
 ADD KEY `MED_ID` (`MED_ID`);
ALTER TABLE `sales`
 ADD PRIMARY KEY (`SALE_ID`),
 ADD KEY `C_ID` (`C_ID`),
 ADD KEY `E_ID` (`E_ID`);
ALTER TABLE `sales_items`
 ADD PRIMARY KEY (`SALE_ID`,`MED_ID`),
 ADD KEY `MED_ID` (`MED_ID`);
ALTER TABLE `suppliers`
 ADD PRIMARY KEY (`SUP_ID`);
ALTER TABLE `sales`
 MODIFY `SALE_ID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=21;
ALTER TABLE `admin`
 ADD CONSTRAINT `admin_fk_1` FOREIGN KEY (`ID`) REFERENCES `employee` (`E_ID`);
ALTER TABLE `emplogin`
 ADD CONSTRAINT `emplogin_fk_1` FOREIGN KEY (`E_ID`) REFERENCES `employee` (`E_ID`);
ALTER TABLE `purchase`
 ADD CONSTRAINT `purchase_fk_1` FOREIGN KEY (`SUP_ID`) REFERENCES `suppliers` (`SUP_ID`),
 ADD CONSTRAINT `purchase_fk_2` FOREIGN KEY _ID(`MED `) REFERENCES `meds` (`MED_ID`);
24
ALTER TABLE `sales`
 ADD CONSTRAINT `sales_fk_1` FOREIGN KEY (`C_ID`) REFERENCES `customer` (`C_ID`),
 ADD CONSTRAINT `sales_fk_2` FOREIGN KEY (`E_ID`) REFERENCES `employee` (`E_ID`);
ALTER TABLE `sales_items`
 ADD CONSTRAINT `sales_items_fk_1` FOREIGN KEY (`SALE_ID`) REFERENCES `sales` (`SALE_ID`),
 ADD CONSTRAINT `sales_items_fk_2` FOREIGN KEY (`MED_ID`) REFERENCES `meds` (`MED_ID`);
 Procedures:
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `EXPIRY` () NO SQL
BEGIN
 SELECT p_id, sup_id, med_id, p_qty, p_cost, pur_date, mfg_date, exp_date
 FROM purchase
 WHERE exp_date BETWEEN CURDATE() AND DATE_SUB(CURDATE(), INTERVAL -6 MONTH);
END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SEARCH_INVENTORY` (IN `search`
VARCHAR(255)) NO SQL
BEGIN
 DECLARE mid DECIMAL(6);
 DECLARE mname VARCHAR(50);
 DECLARE mqty INT;
 DECLARE mcategory VARCHAR(20);
 DECLARE mprice DECIMAL(6,2);
 DECLARE location VARCHAR(30);
 DECLARE exit_loop BOOLEAN DEFAULT FALSE;
 DECLARE MED_CURSOR CURSOR FOR SELECT MED_ID, MED_NAME, MED_QTY, CATEGORY,
MED_PRICE, LOCATION_RACK FROM MEDS;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop=TRUE;
 CREATE TEMPORARY TABLE IF NOT EXISTS T1 (medid DECIMAL(6), medname VARCHAR(50),
medqty INT, medcategory VARCHAR(20), medprice DECIMAL(6,2), medlocation VARCHAR(30));
 OPEN MED_CURSOR;
 med_loop: LOOP
 FETCH FROM MED_CURSOR INTO mid, mname, mqty, mcategory, mprice, location;
 IF exit_loop THEN
 LEAVE med_loop;
 END IF;
 IF(CONCAT(mid, mname, mcategory, location) LIKE CONCAT('%', search, '%')) THEN
 INSERT INTO T1(medid, medname, medqty, medcategory, medprice, medlocation)
 VALUES(mid, mname, mqty, mcategory, mprice, location);
 END IF;
 END LOOP med_loop;
 CLOSE MED_CURSOR;
 SELECT medid, medname, medqty, medcategory, medprice, medlocation FROM T1;
END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `STOCK` () NO SQL
BEGIN
 SELECT med_id, med_name, med_qty, category, med_price, location_rack
 FROM meds
 WHERE med_qty <= 50;
END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `TOTAL_AMT` (IN `ID` INT, OUT `AMT`
DECIMAL(8,2)) NO SQL
BEGIN

25
 UPDATE SALES
 SET S_DATE = SYSDATE(), S_TIME = CURRENT_TIMESTAMP(), TOTAL_AMT = (SELECT
SUM(TOT_PRICE) FROM SALES_ITEMS WHERE SALES_ITEMS.SALE_ID = ID)
 WHERE SALES.SALE_ID = ID;
 SELECT TOTAL_AMT INTO AMT
 FROM SALES
 WHERE SALE_ID = ID;
END$$
DELIMITER ;
 Functions:
DELIMITER $$
CREATE DEFINER=`root`@`localhost` FUNCTION `P_AMT` (`start` DATE, `end` DATE) RETURNS
DECIMAL(8,2) NO SQL
 DETERMINISTIC
BEGIN
 DECLARE PAMT DECIMAL(8,2) DEFAULT 0.0;
 SELECT SUM(P_COST) INTO PAMT
 FROM PURCHASE
 WHERE PUR_DATE >= start AND PUR_DATE <= end;
 RETURN PAMT;
END$$
CREATE DEFINER=`root`@`localhost` FUNCTION `S_AMT` (`start` DATE, `end` DATE) RETURNS
DECIMAL(8,2) NO SQL
BEGIN
 DECLARE SAMT DECIMAL(8,2) DEFAULT 0.0;
 SELECT SUM(TOTAL_AMT) INTO SAMT
 FROM SALES
 WHERE S_DATE >= start AND S_DATE <= end;
 RETURN SAMT;
END$$
DELIMITER ;
 Triggers:
DELIMITER $$
CREATE TRIGGER `QTYDELETE` AFTER DELETE ON `purchase` FOR EACH ROW
BEGIN
 UPDATE meds
 SET MED_QTY = MED_QTY - old.P_QTY
 WHERE meds.MED_ID = old.MED_ID;
END$$
CREATE TRIGGER `QTYINSERT` AFTER INSERT ON `purchase` FOR EACH ROW
BEGIN
 UPDATE meds
 SET MED_QTY = MED_QTY + new.P_QTY
 WHERE meds.MED_ID = new.MED_ID;
END$$
26
CREATE TRIGGER `QTYUPDATE` AFTER UPDATE ON `purchase` FOR EACH ROW
BEGIN
 UPDATE meds
 SET MED_QTY = MED_QTY - old.P_QTY
 WHERE meds.MED_ID = new.MED_ID;
 UPDATE meds
 SET MED_QTY = MED_QTY + new.P_QTY
 WHERE meds.MED_ID = new.MED_ID;
END$$
CREATE TRIGGER `SALE_ID_DELETE` BEFORE DELETE ON `sales` FOR EACH ROW
BEGIN
 DELETE FROM sales_items
 WHERE sales_items.SALE_ID = old.SALE_ID;
END$$
DELIMITER ;
